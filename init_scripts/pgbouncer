#!/bin/bash

### BEGIN INIT INFO
# Provides:          pgbouncer
# Required-Start:    $local_fs $remote_fs $network $syslog $named
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Should-Start:      postgresql
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start pgbouncer
# Description: pgbouncer is a connection pool server and replication
#              proxy for PostgreSQL. Hack by Federico Campoli.
#              The script uses su instead of start-stop-daemon in
#              order to get the file limits
### END INIT INFO

PATH=/sbin:/bin:/usr/sbin:/usr/bin
NAME=pgbouncer
DAEMON=/usr/sbin/${NAME}
LOGFILE="/var/log/postgresql/pgbouncer.log"
CONFIG="/etc/pgbouncer/pgbouncer.ini"
PIDFILE=`awk '/pidfile/ { print $NF }' /etc/pgbouncer/pgbouncer.ini`
PIDDIR=`dirname ${PIDFILE}`
OPTS="-d ${CONFIG} "
RUNASUSER="postgres"

# Include pgbouncer defaults if available
if [ -f /etc/default/pgbouncer ] ; then
    . /etc/default/pgbouncer
fi

# Check if configuration exists
test -f ${CONF} || exit 0

function get_pid()
{
    if [ ! -f ${PIDFILE} ]
    then
        RUNSTATE=1
    else
        RUNPID=`cat ${PIDFILE}`
        kill -0 ${RUNPID} > /dev/null 2>&1
        RUNSTATE=$?
    fi
}

function check_running()
{
    if [ "${RUNSTATE}" != "0" ]
    then
            echo "${NAME} process not running."
            exit 0
    fi

}

function wait_for_stop()
{
    while [ "${RUNSTATE}" == "0" ]
    do
        sleep 1
        get_pid
    done
}

function start_daemon()
{
    # Check if we are still disabled in /etc/default/pgbouncer
    [ "${START:-}" = "0" ] && exit 0

    get_pid
    if [ "${RUNSTATE}" == "0" ]
    then
            echo "Pgbouncer already running with pid ${RUNPID}."
            exit 0
    fi

    echo "Starting ${NAME}"

    test -d ${PIDDIR} || install -d -o postgres -g postgres -m 2775 ${PIDDIR}
    su - ${RUNASUSER} -c "${DAEMON} ${OPTS} > ${LOGFILE} 2>&1"

    get_pid
    echo "${NAME} started with pid ${RUNPID}"
}

function stop_daemon()
{
    get_pid
    check_running

    echo "Stopping ${NAME} with pid ${RUNPID}"
    kill -2 ${RUNPID}
}

case "${1}" in
  start)
    start_daemon
    ;;

  stop)
    stop_daemon
    wait_for_stop
    ;;

  reload | force-reload)
    get_pid
    check_running
    echo "Reloading ${NAME} with pid ${RUNPID}"
    kill -1 ${RUNPID}
    ;;

  restart)
    stop_daemon
    wait_for_stop
    start_daemon
    ;;

  status)
    get_pid
    check_running
    echo "${NAME} is running with pid ${RUNPID}."
    ;;

  *)
    echo "Usage: /etc/init.d/${NAME} {start|stop|reload|force-reload|restart|status}"
    exit 1
    ;;
esac
